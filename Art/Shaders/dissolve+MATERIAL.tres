[gd_resource type="Shader" format=3 uid="uid://dkd3gx50a2xcr"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

// Dissolve params
uniform float dissolve_amount: hint_range(0.0, 1.0) = 0.0;

uniform vec3 glow_color: source_color = vec3(1.0, 0.0, 0.0);
uniform float glow_intensity = 5.0;
uniform float glow_border_width: hint_range(0.0, 0.25) = 0.05;
uniform float glow_border_smoothness: hint_range(0.0, 0.1) = 0.04;

uniform sampler2D noise_texture;

uniform vec3 dissolve_line_start;
uniform vec3 dissolve_line_end;
uniform float point_max_radius = 1.0;
uniform float flat_radius_add = 0.1;
const int num_points = 20;
varying vec3 wrld_vertex;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	vec4 world_pos = MODEL_MATRIX * vec4(VERTEX, 1.0);
    wrld_vertex = world_pos.xyz;
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
	
	
	
	
	float dissolve_noise = texture(noise_texture, UV).r;
	
	float border_mask = 0.0;
	
	vec3 points[num_points];
	float radius[num_points];
	for(int i = 0; i < num_points; ++i){
		points[i] = dissolve_line_start + (dissolve_line_end - dissolve_line_start) / float(num_points) * float(i);
		radius[i] = point_max_radius * (float(i)/float(num_points));
	}
	
	float min_amnt = 1.0;
	bool apply_bonus = false;
	for(int i = 0; i < num_points; ++i){
		float dist = abs(length(wrld_vertex - points[i]));
		if (dist < radius[i]){
			apply_bonus = true;
			float amnt = dist / radius[i];
			min_amnt = min(min_amnt, amnt);
		}
	}
	float dissolve = dissolve_amount * (1.0-min_amnt);
	if (apply_bonus){
		dissolve += flat_radius_add;
	}
	
	
	if (dissolve_amount > 0.0) {
		float border_size = dissolve + glow_border_width;
		
		border_mask = 1.0 - smoothstep(
			border_size - glow_border_smoothness,
			border_size + glow_border_smoothness,
			dissolve_noise
		);
	}
	
	vec3 surface_emission = mix(vec3(0.0), glow_color, border_mask);
	
	
	ALPHA = dissolve_noise;
	ALPHA_SCISSOR_THRESHOLD = dissolve;
	
	
}
"
